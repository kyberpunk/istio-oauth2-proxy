{
    "id": "Test",
    "realm": "test",
    "displayName": "test",
    "enabled": true,
    "roles": {
        "realm": [],
        "client": {
            "test-client": [
                {
                "name": "test-role",
                "description": "Test client role",
                "composite": false,
                "clientRole": true
                }
            ]
        }
    },
    "scopeMappings": [
        {
        "clientScope": "offline_access",
            "roles": [
                "offline_access"
            ]
        }
    ],
    "clients": [
        {
        "clientId": "test-client",
        "name": "test-client",
        "surrogateAuthRequired": false,
        "enabled": true,
        "alwaysDisplayInConsole": false,
        "clientAuthenticatorType": "client-secret",
        "secret": "topsecret",
        "redirectUris": [
            "http://*"
        ],
        "webOrigins": [],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "openid-connect",
        "attributes": {
            "id.token.as.detached.signature": "false",
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "oauth2.device.authorization.grant.enabled": "false",
            "backchannel.logout.revoke.offline.tokens": "false",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "use.refresh.tokens": "true",
            "exclude.session.state.from.auth.response": "false",
            "oidc.ciba.grant.enabled": "false",
            "saml.artifact.binding": "false",
            "backchannel.logout.session.required": "true",
            "client_credentials.use_refresh_token": "false",
            "saml_force_name_id_format": "false",
            "require.pushed.authorization.requests": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
        },
        "authenticationFlowBindingOverrides": {},
        "fullScopeAllowed": true,
        "nodeReRegistrationTimeout": -1,
        "protocolMappers": [
            {
            "name": "client-role-mapper",
            "protocol": "openid-connect",
            "protocolMapper": "oidc-usermodel-client-role-mapper",
            "consentRequired": false,
            "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "resource_access.test-client.roles",
                "jsonType.label": "String",
                "usermodel.clientRoleMapping.clientId": "test-client"
            }
            },
            {
            "name": "audience-mapper",
            "protocol": "openid-connect",
            "protocolMapper": "oidc-audience-mapper",
            "consentRequired": false,
            "config": {
                "included.client.audience": "test-client",
                "id.token.claim": "false",
                "access.token.claim": "true"
            }
            }
        ],
        "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
        ],
        "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
        ]
        }
    ],
    "users": [
        {{- range $index, $user := .Values.keycloak.users -}}
        {{ if ne $index 0 }},{{ end }}
        {
            "username": "{{ $user.name }}",
            "email": "{{ $user.email }}",
            "enabled": true,
            "emailVerified": true,
            "firstName": "",
            "lastName": "",
            "realmRoles": [],
            "clientRoles": {
                "test-client": [
                    "test-role"
                ]
            },
                "credentials": [
                {
                    "type": "password",
                    "value": "{{ $user.password }}"
                }
            ]
        }
        {{- end }}
    ]
}